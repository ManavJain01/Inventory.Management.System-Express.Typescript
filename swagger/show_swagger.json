{
  "openapi": "3.0.0",
  "info": {
    "title": "Inventory Management System",
    "description": "API for managing admin users",
    "version": "1.0.0"
  },
  "paths": {
    "/api/admin": {
      "post": {
        "summary": "Create a new user",
        "description": "This endpoint is used to create a new user (admin).",
        "operationId": "createUser",
        "tags": [
          "Admin"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The username of the user",
                    "example": "adminUser"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for the user",
                    "example": "password123"
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User created successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid data"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/login": {
      "post": {
        "summary": "Login user",
        "description": "This endpoint is used for user login.",
        "operationId": "loginUser",
        "tags": [
          "Admin"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The username of the user",
                    "example": "adminUser"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for the user",
                    "example": "password123"
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "jwt-token-string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid credentials"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/refresh-token": {
      "get": {
        "summary": "Refresh access token",
        "description": "This endpoint is used to refresh the access token for the authenticated user.",
        "operationId": "refreshAccessToken",
        "tags": [
          "Common"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Access token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "new-access-token"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials or no valid refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/docs": {
      "get": {
        "summary": "API Documentation",
        "description": "This endpoint serves the Swagger UI documentation for the API.",
        "operationId": "getApiDocs",
        "tags": [
          "Common"
        ],
        "responses": {
          "200": {
            "description": "Swagger documentation served successfully"
          }
        }
      }
    },
    "/api/inventory": {
      "get": {
        "summary": "Get all inventory items",
        "description": "Fetch all inventory items.",
        "operationId": "getAllInventory",
        "tags": [
          "Inventory"
        ],
        "responses": {
          "200": {
            "description": "List of inventory items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "123"
                      },
                      "name": {
                        "type": "string",
                        "example": "Product A"
                      },
                      "quantity": {
                        "type": "integer",
                        "example": 50
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new inventory item",
        "description": "Create a new inventory item.",
        "operationId": "createInventory",
        "tags": [
          "Inventory"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Product A"
                  },
                  "quantity": {
                    "type": "integer",
                    "example": 50
                  }
                },
                "required": [
                  "name",
                  "quantity"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory item created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Inventory item created successfully"
                    },
                    "id": {
                      "type": "string",
                      "example": "123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid data"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/inventory/report-csv": {
      "get": {
        "summary": "Get inventory CSV report",
        "description": "Generate a CSV report of the inventory.",
        "operationId": "csvReport",
        "tags": [
          "Inventory"
        ],
        "responses": {
          "200": {
            "description": "CSV report generated successfully",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "example": "id,name,quantity\n123,Product A,50\n124,Product B,30"
                }
              }
            }
          }
        }
      }
    },
    "/api/inventory/report-pdf": {
      "get": {
        "summary": "Get inventory PDF report",
        "description": "Generate a PDF report of the inventory.",
        "operationId": "pdfReport",
        "tags": [
          "Inventory"
        ],
        "responses": {
          "200": {
            "description": "PDF report generated successfully",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/inventory/{id}": {
      "get": {
        "summary": "Get inventory item by ID",
        "description": "Fetch an inventory item by its ID.",
        "operationId": "getInventoryById",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory item details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "123"
                    },
                    "name": {
                      "type": "string",
                      "example": "Product A"
                    },
                    "quantity": {
                      "type": "integer",
                      "example": 50
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Inventory item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Item not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Edit inventory item",
        "description": "Edit an existing inventory item by its ID.",
        "operationId": "editInventory",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Updated Product A"
                  },
                  "quantity": {
                    "type": "integer",
                    "example": 100
                  }
                },
                "required": [
                  "name",
                  "quantity"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Inventory item updated successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Inventory item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Item not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update inventory item",
        "description": "Completely update an inventory item by its ID.",
        "operationId": "updateInventory",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Updated Product A"
                  },
                  "quantity": {
                    "type": "integer",
                    "example": 100
                  }
                },
                "required": [
                  "name",
                  "quantity"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Inventory item updated successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Inventory item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Item not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete inventory item",
        "description": "Delete an inventory item by its ID.",
        "operationId": "deleteInventory",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory item deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Inventory item deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Inventory item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Item not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/inventory/allwarehouses/{id}": {
      "get": {
        "summary": "Get all warehouses for an inventory item",
        "description": "Fetch all warehouses associated with an inventory item.",
        "operationId": "getWarehousesById",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of warehouses for the inventory item",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "warehouseId": {
                        "type": "string",
                        "example": "1"
                      },
                      "name": {
                        "type": "string",
                        "example": "Warehouse A"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stock/": {
      "get": {
        "summary": "Get all stock items",
        "description": "Fetch all stock items.",
        "operationId": "getAllStock",
        "tags": [
          "Stock"
        ],
        "responses": {
          "200": {
            "description": "List of stock items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "123"
                      },
                      "name": {
                        "type": "string",
                        "example": "Stock Item A"
                      },
                      "quantity": {
                        "type": "integer",
                        "example": 50
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new stock item",
        "description": "Create a new stock item.",
        "operationId": "createStock",
        "tags": [
          "Stock"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Stock Item A"
                  },
                  "quantity": {
                    "type": "integer",
                    "example": 50
                  }
                },
                "required": [
                  "name",
                  "quantity"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Stock item created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Stock item created successfully"
                    },
                    "id": {
                      "type": "string",
                      "example": "123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid data"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stock/{id}": {
      "get": {
        "summary": "Get stock item by ID",
        "description": "Fetch a stock item by its ID.",
        "operationId": "getStockById",
        "tags": [
          "Stock"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stock item details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "123"
                    },
                    "name": {
                      "type": "string",
                      "example": "Stock Item A"
                    },
                    "quantity": {
                      "type": "integer",
                      "example": 50
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Stock item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Item not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Edit stock item",
        "description": "Edit an existing stock item by its ID.",
        "operationId": "editStock",
        "tags": [
          "Stock"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Updated Stock Item A"
                  },
                  "quantity": {
                    "type": "integer",
                    "example": 100
                  }
                },
                "required": [
                  "name",
                  "quantity"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Stock item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Stock item updated successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Stock item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Item not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update stock item",
        "description": "Completely update a stock item by its ID.",
        "operationId": "updateStock",
        "tags": [
          "Stock"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Updated Stock Item A"
                  },
                  "quantity": {
                    "type": "integer",
                    "example": 100
                  }
                },
                "required": [
                  "name",
                  "quantity"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Stock item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Stock item updated successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Stock item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Item not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete stock item",
        "description": "Delete a stock item by its ID.",
        "operationId": "deleteStock",
        "tags": [
          "Stock"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stock item deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Stock item deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Stock item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Item not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "summary": "Get all users",
        "operationId": "getAllUsers",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "List of all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "operationId": "createUser",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "summary": "Get user by ID",
        "operationId": "getUserById",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete user by ID",
        "operationId": "deleteUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Edit user by ID",
        "operationId": "editUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to edit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User edited successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update user by ID",
        "operationId": "updateUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "summary": "Login user",
        "operationId": "loginUser",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginCredentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "summary": "Logout user",
        "operationId": "logoutUser",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User logged out successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/warehouse": {
      "get": {
        "summary": "Get all warehouses",
        "operationId": "getAllWarehouses",
        "tags": [
          "Warehouses"
        ],
        "responses": {
          "200": {
            "description": "List of all warehouses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Warehouse"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new warehouse",
        "operationId": "createWarehouse",
        "tags": [
          "Warehouses"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Warehouse"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Warehouse created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Warehouse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/warehouse/{id}": {
      "get": {
        "summary": "Get warehouse by ID",
        "operationId": "getWarehouseById",
        "tags": [
          "Warehouses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the warehouse to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Warehouse found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Warehouse"
                }
              }
            }
          },
          "404": {
            "description": "Warehouse not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Edit warehouse by ID",
        "operationId": "editWarehouse",
        "tags": [
          "Warehouses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the warehouse to edit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Warehouse"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Warehouse edited successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Warehouse"
                }
              }
            }
          },
          "404": {
            "description": "Warehouse not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update warehouse by ID",
        "operationId": "updateWarehouse",
        "tags": [
          "Warehouses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the warehouse to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Warehouse"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Warehouse updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Warehouse"
                }
              }
            }
          },
          "404": {
            "description": "Warehouse not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete warehouse by ID",
        "operationId": "deleteWarehouse",
        "tags": [
          "Warehouses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the warehouse to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Warehouse deleted successfully"
          },
          "404": {
            "description": "Warehouse not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}